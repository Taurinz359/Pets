<?php

namespace Tests;

use App\Models\Post;
use Faker\Factory;
use function DI\string;

class PostEditTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->refreshDatabase();
    }

    public function test_get_edit_route()
    {
        $request = $this->createRequest('GET', '/post/1/edit');
        $response = $this->app->handle($request);
        $this->assertEquals(301, $response->getStatusCode());
        $this->assertEquals('/error', $response->getHeaders()['Location'][0]);
    }

    public function test_get_edit_route_dont_user_post_id()
    {
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'GET',
            '/post/1/edit',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        );
        $response = $this->app->handle($request);
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('/error', $response->getHeaders()['Location'][0]);
    }

    public function test_edit_post_with_cookie()
    {
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'GET',
            '/post/7/edit',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        );
        $response = $this->app->handle($request);
        $this->assertEquals('/error', $response->getHeaders()['Location'][0]);
    }

    public function test_delete_post_route()
    {
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'DELETE',
            '/post/7',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        );
        $response = $this->app->handle($request);
        $lastPost = Post::where('id','=','7')->get()->toArray();
        $this->assertEquals(true,empty($lastPost));
    }
    public function test_delete_post_route_incorrect_id()
    {
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'DELETE',
            '/post/1',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        );
        $response = $this->app->handle($request);
        $lastPost = Post::where('id','=','1')->get()->toArray();
        $this->assertEquals(false,empty($lastPost));
    }

    public function test_get_put_edit ()
    {
        $request = $this->createRequest(
            'PUT',
            '/post/1',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => '']
        );
        $response = $this->app->handle($request);
        $this->assertEquals('/error',$response->getHeaders()['Location'][0]);
    }

    public function test_put_edit_route()
    {
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'PUT',
            '/post/6',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        );
        $response = $this->app->handle($request);
        $this->assertStringContainsStringIgnoringCase('needs more',(string)$response->getBody());

    }
    public function test_put_edit_route_incorrect_id()
    {
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'PUT',
            '/post/111',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        );
        $response = $this->app->handle($request);
        $this->assertEquals('/error',$response->getHeaders()['Location'][0]);
    }

    public function test_edit_post()
    {
        $faker = Factory::create();
        $cookie = implode(
            md5("bottle"),
            [
                $this->user->id,
                $this->user->password
            ]
        );
        $request = $this->createRequest(
            'PUT',
            '/post/6',
            ['HTTP_ACCEPT' => 'application/json'],
            ["ce3186f2076d58949b78858d244c3efe" => $cookie]
        )->withParsedBody([
            'name' => $faker->realText(100, 5),
            'content' => $faker->realtext(1000, 2),
            'draft' => 'true'
        ]);
        $response = $this->app->handle($request);
        $lastRecordInDb = Post::latest('id')->first()->toArray();
        //todo написать тесты, которые проверят изменение поста.

    }
}
